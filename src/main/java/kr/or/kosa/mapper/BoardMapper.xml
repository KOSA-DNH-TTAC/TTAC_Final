<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.kosa.dao.BoardDao">

	<!-- 게시판 리스트 -->
	<select id="categoryList" resultType="kr.or.kosa.dto.Board">
		SELECT boardidx, boardname
		FROM BOARD WHERE universitycode=#{param1}
		AND boardname NOT IN('공지사항',
		'건의사항', '자유게시판', '거래게시판')
		AND STATUS='21'
	</select>

	<!-- 기본 제공 게시판 글 목록 -->
	<select id="allBoardList" resultType="kr.or.kosa.dto.Post">
		SELECT COUNT(r.replyidx) AS replyCount, p.idx, p.boardidx, p.universitycode,
		b.boardname,
		p.memberid, p.writedate, p.likenum, p.content, p.title
		FROM POST p
		JOIN BOARD b ON p.boardidx = b.boardidx AND p.status='21'
		LEFT JOIN REPLY r ON p.idx = r.idx AND r.status = '21'
		WHERE b.boardname=#{param1} and
		p.universitycode=#{param2}
		GROUP BY p.idx, p.boardidx, b.boardidx
		ORDER BY p.writedate DESC
	</select>
	
	<!-- 게시판 boardidx 가져오기 -->
	<select id="selectBoardIdx" parameterType="kr.or.kosa.dto.Board" resultType="int">
		SELECT BOARDIDX FROM BOARD WHERE UNIVERSITYCODE = #{universityCode} and BOARDNAME = #{boardName};
	</select>

	<!-- (커스텀 게시판)새 게시판 글 목록 이거필요없음 -->
	<select id="customBoardList" resultType="kr.or.kosa.dto.Post">
		SELECT COUNT(replyidx)
		replyCount, p.idx, p.boardidx, p.universitycode,
		b.boardname,
		p.memberid, p.writedate, p.likenum, p.content, p.title
		FROM POST p LEFT
		OUTER JOIN BOARD b ON p.boardidx = b.boardidx
		LEFT OUTER JOIN REPLY r
		ON p.idx = r.idx
		WHERE b.boardname=#{param1} and
		p.universitycode=#{param2} AND
		p.status='21'
		GROUP BY idx
		ORDER BY
		p.writedate DESC;
	</select>

	<!-- 게시글 상세보기 -->
	<select id="boardContent" parameterType="String"
		resultType="kr.or.kosa.dto.Post">
		SELECT (SELECT COUNT(REPLYIDX) FROM REPLY WHERE STATUS='21' AND IDX=#{idx}) as replyCount, p.idx, p.universitycode,
		b.boardname,
		p.memberid, p.writedate, p.likenum, p.content, p.title
		FROM POST p LEFT OUTER JOIN BOARD b ON p.BOARDIDX = b.BOARDIDX
		LEFT
		OUTER JOIN REPLY r ON p.IDX = r. IDX
		WHERE p.IDX=#{idx}
		GROUP BY p.idx
	</select>

	<!-- 게시글 상세보기(DTO에 맞는 형식으로) -->
	<select id="boardContentDTO" parameterType="int"
		resultType="kr.or.kosa.dto.Post">
		SELECT IDX, BOARDIDX, MEMBERID, BOARDNAME, UNIVERSITYCODE,
		TITLE, CONTENT,
		READNUM, WRITEDATE, LIKENUM, STATUS FROM POST
		WHERE IDX
		= #{idx}
	</select>

	<!-- 댓글 목록 -->
	<select id="replyContent" parameterType="String"
		resultType="kr.or.kosa.dto.Reply">
		SELECT replyidx, parentreplyidx, idx, memberid,
		replycontent, replydate, status FROM
		REPLY
		WHERE idx=#{idx} AND STATUS='21' AND
		parentreplyidx is null
		ORDER BY replydate ASC
	</select>

	<!-- 대댓글 목록 -->
	<select id="reReplyContent" parameterType="String"
		resultType="kr.or.kosa.dto.Reply">
		SELECT replyidx, parentreplyidx, idx, memberid,
		replycontent, replydate FROM
		REPLY
		WHERE idx=#{idx} AND STATUS='21' AND
		parentreplyidx IS NOT NULL
		ORDER BY replydate ASC
	</select>

	<!-- 글 작성 (파일첨부 x) -->
	<insert id="boardInsert" parameterType="kr.or.kosa.dto.Post">
		INSERT INTO POST
		(BOARDIDX,BOARDNAME,MEMBERID,UNIVERSITYCODE,TITLE,CONTENT,WRITEDATE)
		VALUES(#{boardIdx},#{boardName},#{memberId},#{universityCode},#{title},#{content},NOW())
	</insert>

	<!-- 파일 업로드 (최신idx) -->
	<insert id="fileInsert" parameterType="kr.or.kosa.dto.File">
		<selectKey keyProperty="idx" resultType="int" order="BEFORE">
			SELECT IDX from POST ORDER BY IDX DESC LIMIT 1
		</selectKey>
	INSERT INTO FILE (idx, FILENAME,FILEREALNAME,FILEURL,FILESIZE)
	VALUES(#{idx},#{fileName},#{fileRealName},#{fileUrl},#{fileSize})
	</insert>
	
	<!-- 파일 업로드 -->
	<insert id="fileWrite" parameterType="kr.or.kosa.dto.File">
	INSERT INTO FILE (idx, FILENAME,FILEREALNAME,FILEURL,FILESIZE)
	VALUES(#{idx},#{fileName},#{fileRealName},#{fileUrl},#{fileSize})
	</insert>
	
	<!-- 파일 삭제 -->
	<insert id="fileDelete" parameterType="String">
	DELETE FROM FILE
	WHERE IDX = #{param1} AND FILEREALNAME = #{param2}
	</insert>
	
	<!-- 거래 업로드 -->
	<insert id="productInsert" parameterType="kr.or.kosa.dto.Product">
		<selectKey keyProperty="idx" resultType="int" order="BEFORE">
			SELECT IDX from POST ORDER BY IDX DESC LIMIT 1
		</selectKey>
	INSERT INTO PRODUCT (idx, PRODUCTPRICE,PRODUCTSOLD)
	VALUES(#{idx},#{productPrice},#{productSold})
	</insert>

	<!-- 가장 최근 글쓴 IDX 가져오기 -->
	<select id="recentPostIdx" resultType="int">
		SELECT IDX from POST ORDER
		BY IDX DESC LIMIT 1
	</select>

	<!-- 파일테이블 가져오기 -->
	<select id="fileContent" parameterType="String"
		resultType="kr.or.kosa.dto.File">
		SELECT FILENUM, IDX, FILENAME, FILEREALNAME, FILEURL, FILESIZE FROM FILE WHERE IDX
		= #{idx}
	</select>
	
	<!-- 파일테이블 하나만 가져오기 -->
	<select id="fileDetailContent" parameterType="String"
		resultType="kr.or.kosa.dto.File">
		SELECT FILENUM, IDX, FILENAME, FILEREALNAME, FILEURL, FILESIZE FROM FILE
		WHERE IDX = #{param1} AND FILEREALNAME = #{param2}
	</select>
	
	<!-- 거래테이블 가져오기 -->
	<select id="productContent" parameterType="String"
		resultType="kr.or.kosa.dto.Product">
		SELECT PRODUCTIDX, IDX, PRODUCTPRICE, PRODUCTSOLD from PRODUCT WHERE IDX
		= #{idx}
	</select>

	<!-- 글 수정 -->
	<update id="boardEdit" parameterType="kr.or.kosa.dto.Post">
		UPDATE POST
		SET TITLE =
		#{title}, CONTENT= #{content}, STATUS=#{status}, LIKENUM=#{likeNum}
		WHERE
		IDX = #{idx};
	</update>

	<!-- 게시글 추천 기능 -->
	<!-- 추천 여부 검사 -->
	<select id="likeCheck" resultType="int" parameterType="map">
		SELECT COUNT(*)
		FROM POSTLIKE
		WHERE IDX = #{param1} AND MEMBERID = #{param2}
	</select>

	<update id="deletePostLike">
		DELETE FROM POSTLIKE
		WHERE IDX = #{param1} AND MEMBERID = #{param2}
	</update>

	<update id="updateDislike">
		UPDATE POST SET LIKENUM = LIKENUM-1 WHERE IDX = #{param1}
	</update>

	<insert id="insertPostLike">
		INSERT INTO POSTLIKE (IDX, MEMBERID) VALUES (#{param1}, #{param2})
	</insert>

	<update id="updateLike">
		UPDATE POST SET LIKENUM = LIKENUM+1 WHERE IDX = #{param1}
	</update>

	<!-- 추천 개수 -->
	<select id="likeCount" resultType="int">
		SELECT likenum FROM POST WHERE
		idx=#{param1};
	</select>


	<!-- 관리자 -->
	<!-- 게시판 카테고리 -->
	<select id="getAdminCategory" resultType="kr.or.kosa.dto.Board">
	SELECT b.boardidx, b.boardname, COUNT(DISTINCT p.idx) as postCount, COUNT(DISTINCT r.replyidx) AS replyCount
	FROM BOARD b
	LEFT JOIN POST p ON p.boardidx = b.boardidx AND p.STATUS='21'
	LEFT JOIN REPLY r ON p.idx = r.IDX AND r.STATUS='21'
	WHERE b.universitycode=#{universitycode}
	AND b.STATUS='21'
	GROUP BY BOARDIDX
	</select>

	<!-- 게시판 이름 수정 -->
	<update id="updateBoardName">
		UPDATE BOARD SET BOARDNAME=#{boardname} WHERE BOARDIDX=#{boardidx}
	</update>
	
	<!-- 새 커스텀 게시판 -->
	<insert id="newCustomBoard">
		INSERT INTO BOARD(UNIVERSITYCODE, BOARDNAME) VALUES(#{universitycode}, #{boardname})
	</insert>
	
	<!-- 커스텀 게시판 삭제(비활성화) -->
	<update id="deleteBoard">
		UPDATE BOARD SET STATUS='22' WHERE BOARDIDX=#{boardidx}
	</update>

</mapper>





