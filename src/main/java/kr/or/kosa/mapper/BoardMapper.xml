<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.kosa.dao.BoardDao">

	<!-- 게시판 리스트 -->
	<select id="categoryList" resultType="kr.or.kosa.dto.Board">
		SELECT boardidx, boardname
		FROM BOARD WHERE universitycode=#{param1}
		AND boardname NOT IN('공지사항',
		'건의사항', '자유게시판', '거래게시판')
	</select>

	<!-- 기본 제공 게시판 글 목록 -->
	<select id="allBoardList" resultType="kr.or.kosa.dto.Post">
		SELECT COUNT(replyidx)
		replyCount, p.idx, p.boardidx, p.universitycode,
		b.boardname,
		p.memberid, p.writedate, p.likenum, p.content, p.title
		FROM POST p LEFT
		OUTER JOIN BOARD b ON p.boardidx = b.boardidx
		LEFT OUTER JOIN REPLY r
		ON p.idx = r.idx
		WHERE b.boardname=#{param1} and
		p.universitycode=#{param2} AND
		p.status='21'
		GROUP BY idx
		ORDER BY
		p.writedate DESC;
	</select>

	<!-- 새 게시판 글 목록 -->
	<select id="customBoardList" resultType="kr.or.kosa.dto.Post">
		SELECT COUNT(replyidx)
		replyCount, p.idx, p.boardidx, p.universitycode,
		b.boardname,
		p.memberid, p.writedate, p.likenum, p.content, p.title
		FROM POST p LEFT
		OUTER JOIN BOARD b ON p.boardidx = b.boardidx
		LEFT OUTER JOIN REPLY r
		ON p.idx = r.idx
		WHERE b.boardname=#{param1} and
		p.universitycode=#{param2} AND
		p.status='21'
		GROUP BY idx
		ORDER BY
		p.writedate DESC;
	</select>

	<!-- 게시글 상세보기 -->
	<select id="boardContent" parameterType="String"
		resultType="kr.or.kosa.dto.Post">
		SELECT count(replyidx) replyCount, p.idx, p.universitycode,
		b.boardname,
		p.memberid, p.writedate, p.likenum, p.content, p.title
		FROM POST p LEFT OUTER JOIN BOARD b ON p.BOARDIDX = b.BOARDIDX
		LEFT
		OUTER JOIN REPLY r ON p.IDX = r. IDX
		WHERE p.IDX=#{idx}
	</select>

	<!-- 게시글 상세보기(DTO에 맞는 형식으로) -->
	<select id="boardContentDTO" parameterType="int"
		resultType="kr.or.kosa.dto.Post">
		SELECT IDX, BOARDIDX, MEMBERID, BOARDNAME, UNIVERSITYCODE,
		TITLE, CONTENT,
		READNUM, WRITEDATE, LIKENUM, STATUS FROM POST
		WHERE IDX
		= #{idx}
	</select>

	<!-- 댓글 목록 -->
	<select id="replyContent" parameterType="String"
		resultType="kr.or.kosa.dto.Reply">
		SELECT replyidx, parentreplyidx, idx, memberid,
		replycontent, replydate, status FROM
		REPLY
		WHERE idx=#{idx} AND STATUS='21' AND
		parentreplyidx is null
		ORDER BY replydate ASC
	</select>

	<!-- 대댓글 목록 -->
	<select id="reReplyContent" parameterType="String"
		resultType="kr.or.kosa.dto.Reply">
		SELECT replyidx, parentreplyidx, idx, memberid,
		replycontent, replydate FROM
		REPLY
		WHERE idx=#{idx} AND STATUS='21' AND
		parentreplyidx IS NOT NULL
		ORDER BY replydate ASC
	</select>

	<!-- 글 작성 (파일첨부 x) -->
	<insert id="boardInsert" parameterType="kr.or.kosa.dto.Post">
		INSERT INTO POST
		(BOARDIDX,BOARDNAME,MEMBERID,UNIVERSITYCODE,TITLE,CONTENT,WRITEDATE)
		VALUES(#{boardIdx},#{boardName},#{memberId},#{universityCode},#{title},#{content},NOW())
	</insert>

	<!-- 파일 업로드 -->
	<insert id="fileInsert" parameterType="kr.or.kosa.dto.File">
		<selectKey keyProperty="idx" resultType="int" order="BEFORE">
			SELECT IDX from POST ORDER BY IDX DESC LIMIT 1
		</selectKey>
	INSERT INTO FILE (idx, FILENAME,FILEREALNAME,FILEURL,FILESIZE)
	VALUES(#{idx},#{fileName},#{fileRealName},#{fileUrl},#{fileSize})
	</insert>

	<!-- 가장 최근 글쓴 IDX 가져오기 -->
	<select id="recentPostIdx" resultType="int">
		SELECT IDX from POST ORDER
		BY IDX DESC LIMIT 1
	</select>

	<!-- 파일테이블 가져오기 -->
	<select id="fileContent" parameterType="String"
		resultType="kr.or.kosa.dto.File">
		SELECT FILENUM, IDX, FILENAME, FILEREALNAME, FILEURL, FILESIZE FROM FILE WHERE IDX
		= #{idx}
	</select>

	<!-- 글 수정 -->
	<update id="boardEdit" parameterType="kr.or.kosa.dto.Post">
		UPDATE POST
		SET TITLE =
		#{title}, CONTENT= #{content}, STATUS=#{status}
		WHERE
		IDX = #{idx};
	</update>

	<!-- 게시글 추천 기능 -->
	<!-- 추천 여부 검사 -->
	<select id="likeCheck" resultType="int" parameterType="map">
		SELECT COUNT(*)
		FROM POSTLIKE
		WHERE IDX = #{param1} AND MEMBERID = #{param2}
	</select>

	<update id="deletePostLike">
		DELETE FROM POSTLIKE
		WHERE IDX = #{param1} AND MEMBERID = #{param2}
	</update>

	<update id="updateDislike">
		UPDATE POST SET LIKENUM = LIKENUM-1 WHERE IDX = #{param1}
	</update>

	<insert id="insertPostLike">
		INSERT INTO POSTLIKE (IDX, MEMBERID) VALUES (#{param1}, #{param2})
	</insert>

	<update id="updateLike">
		UPDATE POST SET LIKENUM = LIKENUM+1 WHERE IDX = #{param1}
	</update>

	<!-- 추천 개수 -->
	<select id="likeCount" resultType="int">
		SELECT likenum FROM POST WHERE
		idx=#{param1};
	</select>





</mapper>





